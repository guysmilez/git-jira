#!/bin/bash -e

function _write_precommit_script () {
	local SCRIPT_NAME=/tmp/prepare-commit-msg-$RANDOM

### STARTHEREDOC #############################################################
	cat << 'EOF' > $SCRIPT_NAME
#!/bin/bash -e

COMMIT_FILE=$1

. git-sh-setup

CACHE_FILE=$GIT_DIR/jira.cache

JIRA_SERVER=$(git config jira.server || true)
JIRA_USER=$(git config jira.user || true)
JIRA_PASSWORD=$(git config jira.password || true)
JIRA_PREFIX=$(git config jira.prefix || true)

JIRA_COMMIT_TEMPLATE=$(git config jira.commit.template || true)

JIRA_CLI=$(git config jira.cli || true)

JIRA_CMD="$JIRA_CLI --server $JIRA_SERVER --user $JIRA_USER --password $JIRA_PASSWORD"

function prepend () {
	local MSG=$1
	# Give up if we already have a commit message (like when rebasing)
	awk 'NR==1 && /^$/ { exit 0 }; {exit 1} ' < $COMMIT_FILE || return 0

	echo -e $MSG | sed -i '' -e "1s/^/\
# [jira]/" -e 'r /dev/stdin' -e '2s/^/# \
/' $COMMIT_FILE
}

function prepend_ok () {
	local MSG=$1
	# Give up if we already have a commit message (like when rebasing)
	awk 'NR==1 && /^$/ { exit 0 }; {exit 1} ' < $COMMIT_FILE || return 0

	echo -e $MSG | sed -i '' -e 'r /dev/stdin' -e '1d' -e '2s/^//' $COMMIT_FILE
}

function get_cached_issue () {
	local ISSUE=$1
	test -f $CACHE_FILE || return 0
	local LINE=`grep ^$ISSUE: $CACHE_FILE`
	test -n "$LINE" || return 0
	ISSUE_SUMMARY=$(echo $LINE | sed -e "s/^$ISSUE: //")
}

function fail () {
	echo $@
	exit 1
}

# start to work

require_work_tree

test -n "$GIT_DIR" || fail "Missing GIT_DIR variable"
test -n "$COMMIT_FILE" || fail "Missing commit file argument"
test -n "$JIRA_SERVER" || fail "Missing git config variable jira.server (set it with 'git config jira.server ...')"
test -n "$JIRA_CLI" || fail "Missing git config variable jira.cli (set it with 'git config jira.cli ...')"
test -n "$JIRA_USER" || fail "Missing git config variable jira.user (set it with 'git config jira.user ...')"
test -n "$JIRA_PASSWORD" || fail "Missing git config variable jira.password (set it with 'git config jira.password ...')"
test -n "$JIRA_PREFIX" || fail "Missing git config variable jira.prefix (set it with 'git config jira.prefix ...')"
test -n "$JIRA_COMMIT_TEMPLATE" || JIRA_COMMIT_TEMPLATE="%i - "

BRANCH_NAME=$(git symbolic-ref HEAD | sed -e 's/refs\/heads\///')

if [ -z "$BRANCH_NAME" ]; then
	prepend "# Not committing from a branch"
	exit 0
fi

# is the branch a JIRA key?
if [[ ! ( $BRANCH_NAME =~ ^[A-Z]+-[0-9]+$ ) ]]; then
	prepend "# Branch does not appear to be a JIRA issue"
	exit 0
fi

get_cached_issue $BRANCH_NAME

if [ -z "$ISSUE_SUMMARY" ]; then
	echo "Querying JIRA, this might take a while..."
	ISSUE_SUMMARY=`$JIRA_CMD --action getFieldValue --issue $BRANCH_NAME --field Summary | sed -e '1d'`
	SHOULD_CACHE=1
fi

if [ -z "$ISSUE_SUMMARY" ]; then
	prepend "# Branch appears to be a JIRA issue but we were unable to get its description"
	exit 0
fi

if [ "$SHOULD_CACHE" = "1" ]; then
	echo "$BRANCH_NAME: $ISSUE_SUMMARY" >> $CACHE_FILE
fi

TEMPLATE=$(echo "$JIRA_COMMIT_TEMPLATE" | awk -v i="$BRANCH_NAME" -v t="$ISSUE_SUMMARY" '{sub(/%i/,i); sub(/%t/,t); print}')
prepend_ok "#$TEMPLATE\n#\n# This branch is associated with the following JIRA issue:\n#\t[$BRANCH_NAME] $ISSUE_SUMMARY\n# View this issue at $JIRA_SERVER/browse/$BRANCH_NAME\n#"
EOF
### END HEREDOC ##############################################################

	if $(diff "$GIT_DIR/hooks/prepare-commit-msg" "$SCRIPT_NAME" >/dev/null 2>/dev/null); then
		: # do nothing
	else
		printf "The JIRA git extension requires a modified \"prepare-commit-msg\" hook.\n"
		printf "It appears that it has not yet been installed or is out of date with the\n"
		printf "needed version. We can update it for you automatically.\n\n"

		read -e -p "Install updated hook [yes]: " ans
		ans=$(echo $ans | tr [a-z] [A-Z])

		if [ -z "$ans" -o \
			"$ans" == "YES" -o \
			"$ans" == "Y" ]; then
			cp "$SCRIPT_NAME" "$GIT_DIR/hooks/prepare-commit-msg"

			echo "Hook updated."
		fi
	fi
}

# git required variables
USAGE='<command> [<args>]

Commands for <command>:
    start <issue-id>
        Creates a new branch with the specified JIRA <issue-id>, associates it
        with the issue in JIRA, assigns it to you, and sets the status to
        "In Progress".
            <issue-id>   Fully-qualified issue ID (e.g., ABC-123) or just
                         numeric ID
    promote [<issue-id>]
        Takes the specified branch <issue-id> (or the current branch, if none)
        specified, sets status to "Testing", and merges your issue branch back
        into your configured development branch.
'
LONG_USAGE='git-jira lets you create new issue branches based on a JIRA issues
and mark those issues as "in progress". Additionally, when you have completed
those issues, you can push the changes back to JIRA with links to your code
commits and customized notes.'

# Sets GIT_DIR and GIT_OBJECT_DIRECTORY, and provides functions below
. git-sh-setup

# Check for updated precommit script
_write_precommit_script

# Setup
GIT_KEY_JIRA_CLI="jira.cli"
GIT_KEY_JIRA_SERVER="jira.server"
GIT_KEY_JIRA_USER="jira.user"
GIT_KEY_JIRA_PASSWORD="jira.password"
GIT_KEY_JIRA_PREFIX="jira.prefix"
GIT_KEY_TARGET_MERGE_BRANCH="jira.targetmergebranch"
GIT_KEY_BEANSTALK_REPOSITORY="jira.beanstalkrepository"

# JIRA credentials
JIRA_SERVER=$(git config $GIT_KEY_JIRA_SERVER || true)
JIRA_USER=$(git config $GIT_KEY_JIRA_USER || true)
JIRA_PASSWORD=$(git config $GIT_KEY_JIRA_PASSWORD || true)
JIRA_PREFIX=$(git config $GIT_KEY_JIRA_PREFIX || true)

JIRA_CLI=$(git config $GIT_KEY_JIRA_CLI || true)
CACHE_FILE=$GIT_DIR/jira.cache

GIT_USER=$(git config user.name || echo $USER)
TARGET_MERGE_BRANCH=$(git config $GIT_KEY_TARGET_MERGE_BRANCH || true)

BEANSTALK_REPOSITORY=$(git config $GIT_KEY_BEANSTALK_REPOSITORY || true)

while [ -z "$JIRA_CLI" -o \
	-z "$JIRA_SERVER" -o \
	-z "$JIRA_USER" -o \
	-z "$JIRA_PASSWORD" -o \
	-z "$JIRA_PREFIX" -o \
	-z "$BEANSTALK_REPOSITORY" -o \
	-z "$TARGET_MERGE_BRANCH" ]; do

	printf "We need to set some configuration values in order to correctly\n"
	printf "interface with JIRA. Entered values will be stored in your\n"
	printf "$HOME/.gitconfig file.\n"

	if [ -z "$JIRA_CLI" ]; then
		printf "\nThe JIRA CLI JAR file should be installed somewhere in your home\n"
		printf "directory or globally. Please provide the full path to the CLI script, e.g.\n"
		printf "$HOME/bin/jira-cli/jira.sh\n\n"

		read -e -p "JIRA CLI script path: " ans

		if [ -z $ans ]; then
			printf "You did not specify a path. Would you like to download and install\n"
			printf "a working configuration into $HOME/bin?\n\n"

			read -e -p "Install working configuration [yes]: " ans2
			ans2=$(echo $ans2 | tr [a-z] [A-Z])

			if [ -z "$ans2" -o \
				"$ans2" == "YES" -o \
				"$ans2" == "Y" ]; then
				LINK="https://bobswift.atlassian.net/wiki/download/attachments/16285777/jira-cli-3.1.0-distribution.zip?api=v2"

				# Add ability to automatically download a working CLI from Atlassian
				echo "Downloading JIRA CLI from Atlassian..."
				JIRA_CLI_DOWNLOAD="/tmp/jira-cli.zip"
				curl --progress-bar -o "$JIRA_CLI_DOWNLOAD" "$LINK"

				printf "Installing to $HOME/bin ..."
				mkdir -p "$HOME/bin"
				unzip "$JIRA_CLI_DOWNLOAD" "$HOME/bin" >/dev/null
				ln -s "$HOME/bin/jira-cli-3.1.0" "$HOME/bin/jira-cli"

				printf "done!\n"
			fi
		fi

		JIRA_CLI="$ans"
		git config $GIT_KEY_JIRA_CLI "$JIRA_CLI"
	fi

	if [ -z "$JIRA_SERVER" ]; then
		printf "\nPlease specify your JIRA server, including full protocol\n"
		printf "(e.g., https://yourondemandserver.jira.com).\n\n"

		read -e -p "JIRA server: " ans

		JIRA_SERVER="$ans"
		git config $GIT_KEY_JIRA_SERVER $JIRA_SERVER
	fi

	if [ -z "$JIRA_USER" ]; then
		printf "\nPlease specify your JIRA username. Note that this will not work\n"
		printf "with accounts authenticated by a 3rd-party, such as Google. You\n"
		printf "MUST have a full-fledged OnDemand account.\n\n"

		read -e -p "JIRA username: " ans

		JIRA_USER=$ans
		git config $GIT_KEY_JIRA_USER $JIRA_USER
	fi

	if [ -z "$JIRA_PASSWORD" ]; then
		old_tty=$(stty -g)
		stty -echo
		printf "\n"
		read -e -p "JIRA password: " ans
		stty $old_tty

		JIRA_PASSWORD=$ans
		git config $GIT_KEY_JIRA_PASSWORD $JIRA_PASSWORD
	fi

	if [ -z "$JIRA_PREFIX" ]; then
		printf "\nPlease specify the JIRA prefix for issues associated with this\n"
		printf "repository. This will allow you to simply identify issues/branches\n"
		printf "by their ID number, instead of fully qualified issue ID.\n\n"

		read -e -p "JIRA issue prefix: " ans

		JIRA_PREFIX=$ans
		git config $GIT_KEY_JIRA_PREFIX $JIRA_PREFIX
	fi

	if [ -z "$BEANSTALK_REPOSITORY" ]; then
		printf "\nPlease specify the name of your Beanstalk repository that houses\n"
		printf "the codebase for the associated JIRA project and issues.\n"
		printf "Do not enter the full URL.\n\n"

		read -e -p "Beanstalk repository key: " ans

		BEANSTALK_REPOSITORY=$ans
		git config $GIT_KEY_BEANSTALK_REPOSITORY $BEANSTALK_REPOSITORY
	fi

	if [ -z "$TARGET_MERGE_BRANCH" ]; then
		printf "\nPlease specify the branch you'd like to merge your issue branches\n"
		printf "back into when finished. This is typically set to \"master\" unless\n"
		printf "you have another specific development branch you wish to work with.\n\n"

		read -e -p "Destination merge branch [master]: " ans

		if [ -z $ans ]; then
			ans=master
		fi

		TARGET_MERGE_BRANCH=$ans
		git config $GIT_KEY_TARGET_MERGE_BRANCH $TARGET_MERGE_BRANCH
	fi
done

JIRA_CMD="$JIRA_CLI --server $JIRA_SERVER --user $JIRA_USER --password $JIRA_PASSWORD"

function get_cached_issue () {
	local ISSUE=$1
	test -f $CACHE_FILE || return 0
	local LINE=`grep ^$ISSUE: $CACHE_FILE`
	test -n "$LINE" || return 0
	ISSUE_SUMMARY=$(echo $LINE | sed -e "s/^$ISSUE: //")
}

function is_jira_issue () {
	local ISSUE=$1
	[[ $ISSUE =~ ^([A-Z]+-[0-9]+)$ ]] || fail "Branch $ISSUE does not appear to be a JIRA issue; ensure you specify an all-caps identifier"
}

function fail () {
	echo $@
	exit 1
}

##### Do our thing #####
require_work_tree
test -n "$GIT_DIR" || fail "Missing GIT_DIR variable"

ACTION=$1
test -n "$ACTION" || usage

BRANCH_NAME=$2

case "$ACTION" in
	start)
		test -n "$BRANCH_NAME" || usage
		BRANCH_NAME=$JIRA_PREFIX-$BRANCH_NAME
		is_jira_issue "$BRANCH_NAME"

		echo "Checking JIRA status..."
		ISSUE_STARTED=$($JIRA_CMD --action getAvailableSteps --issue $BRANCH_NAME | grep \"Start\" | wc -l | awk {'print $1'})

		if [[ $ISSUE_STARTED -ne 0 ]]; then
			echo "Updating JIRA status..."
			$JIRA_CMD --action progressIssue --issue $BRANCH_NAME --step "Start"
			$JIRA_CMD --action updateIssue --issue $BRANCH_NAME --assignee $JIRA_USER
		fi

		# Cache the JIRA issue title for later cheaper commits
		get_cached_issue $BRANCH_NAME
		if [ -z "$ISSUE_SUMMARY" ]; then
			ISSUE_SUMMARY=$($JIRA_CMD --action getFieldValue --issue $BRANCH_NAME --field Summary | sed -e '1d')
			echo "$BRANCH_NAME: $ISSUE_SUMMARY" >> $CACHE_FILE
		fi

		if [ -z "$(git branch | grep $BRANCH_NAME)" ]; then
			git checkout -b $BRANCH_NAME
			printf "\nJIRA updated and new branch $BRANCH_NAME created. When you are finished with\n"
			printf "this branch, run:\n\n\tgit ${0##*-} promote $2\n\n"
		else
			git checkout $BRANCH_NAME
			printf "To update this issue's JIRA workflow status when you're ready to merge back\n"
			printf "into your parent branch, run:\n\n\tgit ${0##*-} promote $2\n\n"
		fi
	;;

	promote)
		test -n "$BRANCH_NAME" || BRANCH_NAME=$(git symbolic-ref HEAD | sed -e 's/refs\/heads\///')
		test -n "$BRANCH_NAME" || fail "Unable to get branch name from current branch and no argument specified"
		BRANCH_NAME=$BRANCH_NAME
		is_jira_issue "$BRANCH_NAME"

		# EOT is CTRL-V, CTRL-D
# 		read -d '' -p "Enter any additional comments you would like appended to your JIRA issue.
# Press CTRL-D to finish, or CTRL-C to abort:
# " NOTES
		NOTES_FILE=/tmp/JIRA_NOTES_MSG_$RANDOM

		printf "\n; Provide any additional information you want to include in the JIRA ticket\n" >> $NOTES_FILE
		printf "; comment here. Lines that begin with a semicolon (;) will be ignored. Note\n" >> $NOTES_FILE
		printf "; that you should not intentionally use line breaks, as JIRA will word-wrap\n" >> $NOTES_FILE
		printf "; for you. An empty message aborts the promote.\n" >> $NOTES_FILE

		${EDITOR:-vi} "$NOTES_FILE"
		NOTES=$(cat "$NOTES_FILE" | sed -e '/;.*/d') # Remove comments
		NOTES_TRIMMED=$(echo "$NOTES" | sed -e '/^$/d') # Remove newlines, just to see if there's anything there

		rm "$NOTES_FILE"

		if [ ! -z $NOTES_TRIMMED ]; then
			printf "\n\nMerging branch $BRANCH_NAME into $TARGET_MERGE_BRANCH..."

			# The following reduces git log messages down to oneline--multiline
			# commits are not an issue
			COMMITS=$(git log $TARGET_MERGE_BRANCH.. --oneline --no-abbrev-commit | sed \
				-e "s/\([0-9a-f]*\) \(.*\)/* \[\2|http:\/\/hidef.beanstalkapp.com\/$BEANSTALK_REPOSITORY\/changesets\/\1\]/" \
				-e "s/$BRANCH_NAME - //")
			COMMIT_MSG="(i) *This should now be available for testing.*

The following code commits have been made to address this issue:

$COMMITS

$NOTES
"
			git checkout $BRANCH_NAME
			git rebase $TARGET_MERGE_BRANCH
			git checkout $TARGET_MERGE_BRANCH
			git merge $BRANCH_NAME

			printf "\nUpdating JIRA...\n"

			$JIRA_CMD --action progressIssue --issue $BRANCH_NAME --step "Promote"
			$JIRA_CMD --action addComment --issue $BRANCH_NAME --comment "$COMMIT_MSG"

			read -e -p "Delete local issue branch $BRANCH_NAME [y]: " ans
			ans=$(echo $ans | tr [a-z] [A-Z])

			if [ -z $ans -o \
				$ans == "Y" -o \
				$ans == "YES" ]; then
				git branch -d $BRANCH_NAME
			fi

			echo "Done!"
		else
			echo "Aborting promote due to empty promotion message."
		fi
	;;

	*) echo "$USAGE" ;;
esac
